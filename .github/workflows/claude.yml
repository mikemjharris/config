name: Claude Linear Task Automation
on:
  workflow_dispatch:
    inputs:
      ticket_identifier:
        description: 'Linear ticket ID to work on (e.g., MIK-4, or leave empty for highest priority)'
        required: false
        default: ''
        type: string
      custom_instructions:
        description: 'Additional instructions for Claude'
        required: false
        default: 'Implement the solution following best practices and create comprehensive documentation'
        type: string
      max_turns:
        description: 'Maximum conversation turns for Claude'
        required: false
        default: '10'
        type: string

jobs:
  claude-task-automation:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Create MCP configuration
        run: |
          cat > mcp-config.json << 'EOF'
          {
            "mcpServers": {
              "linear": {
                "command": "npx",
                "args": ["-y", "@tacticlaunch/mcp-linear"],
                "env": {
                  "LINEAR_API_TOKEN": "${{ secrets.LINEAR_API_KEY }}"
                }
              }
            }
          }
          EOF

      - name: Run Claude Task Automation
        id: claude-automation
        uses: anthropics/claude-code-base-action@beta
        with:
          prompt: |
            # Linear Task Automation Mission
            
            You are a senior software engineer tasked with implementing Linear tickets. Your goal is to:
            
            1. **Analyze the ticket**: Get details about the Linear ticket (ID: "${{ github.event.inputs.ticket_identifier }}" or find the highest priority open ticket if none specified)
            
            2. **Understand the requirements**: Read the ticket description, comments, and any related context
            
            3. **Implement the solution**: Write the necessary code, documentation, tests, or configuration
            
            4. **Create a Pull Request**: Commit your changes and prepare a PR with:
               - Clear title referencing the Linear ticket
               - Comprehensive description
               - Implementation details
               - Testing notes
            
            5. **Update Linear**: Comment on the ticket with progress and link to the PR
            
            ## Additional Instructions
            ${{ github.event.inputs.custom_instructions }}
            
            ## Process Steps:
            
            ### Step 1: Get Ticket Information
            - If ticket ID provided: fetch that specific ticket
            - If no ID: find the highest priority open ticket that's actionable (not just onboarding/documentation)
            - Get full details including description, comments, labels, assignee
            
            ### Step 2: Analyze & Plan
            - Understand what needs to be implemented
            - Check if this is a code task, configuration, documentation, or setup task
            - Plan the implementation approach
            
            ### Step 3: Implement
            - Create/modify files as needed
            - Follow best practices for the codebase
            - Add appropriate tests if it's code
            - Update documentation if needed
            
            ### Step 4: Create PR
            - Commit changes with meaningful messages
            - Create a branch with format: feature/linear-{ticket-id}
            - Prepare comprehensive PR description
            
            ### Step 5: Update Linear
            - Add a comment to the Linear ticket
            - Include link to the PR
            - Update status if appropriate
            - Mention any blockers or next steps
            
            Please start by getting the Linear ticket information and then proceed with the implementation.
          mcp_config: "./mcp-config.json"
          allowed_tools: "Bash(git:*),View,Read,Write,Edit,MultiEdit,Glob,Grep,LS,mcp__linear__linear_getIssues,mcp__linear__linear_getIssueById,mcp__linear__linear_searchIssues,mcp__linear__linear_updateIssue,mcp__linear__linear_createComment,mcp__linear__linear_getProjects,mcp__linear__linear_getTeams,mcp__linear__linear_getViewer"
          max_turns: "${{ github.event.inputs.max_turns }}"
          timeout_minutes: "20"
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
