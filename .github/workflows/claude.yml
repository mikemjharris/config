name: Claude Linear Task Automation
on:
  workflow_dispatch:
    inputs:
      ticket_identifier:
        description: 'Linear ticket ID to work on (e.g., MIK-4, or leave empty for highest priority)'
        required: false
        default: ''
        type: string
      custom_instructions:
        description: 'Additional instructions for Claude'
        required: false
        default: 'Implement the solution following best practices and create comprehensive documentation'
        type: string
      max_turns:
        description: 'Maximum conversation turns for Claude'
        required: false
        default: '20'
        type: string

jobs:
  claude-task-automation:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Git Configuration
        run: |
          git config user.name "Claude Assistant"
          git config user.email "claude.assistant@omnea.co"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Create MCP Configuration
        run: |
          cat > mcp-config.json << 'EOF'
          {
            "mcpServers": {
              "linear": {
                "command": "npx",
                "args": ["-y", "@tacticlaunch/mcp-linear"],
                "env": {
                  "LINEAR_API_TOKEN": "${{ secrets.LINEAR_API_KEY }}"
                }
              }
            }
          }
          EOF

      - name: Run Claude Task Automation
        id: claude-automation
        uses: anthropics/claude-code-base-action@beta
        env:
          GH_TOKEN: ${{ github.token }}
        with:
          prompt: |
            # Linear Task Automation Mission
            
            You are a senior software engineer tasked with implementing Linear tickets efficiently. Your goal is to:
            
            1. **Analyze the ticket**: Get details about Linear ticket (ID: "${{ github.event.inputs.ticket_identifier }}" or find highest priority if none specified)
            2. **Implement the solution**: Write necessary code, documentation, tests, or configuration  
            3. **Submit PR atomically**: Create branch, commit, push, and submit PR in one efficient sequence
            4. **Update Linear**: Comment on ticket with progress and PR link
            
            ## Additional Instructions
            ${{ github.event.inputs.custom_instructions }}
            
            ## Workflow Requirements:
            
            **CRITICAL**: Only work on Linear tickets that have the 'claude' label attached. This label indicates the ticket is approved for Claude automation.
            
            **Label Verification Process:**
            1. Get all available labels using `linear_getLabels`
            2. Find the 'claude' label and note its ID
            3. When searching for tickets, filter by this label ID
            4. If a specific ticket ID is provided, verify it has the 'claude' label before proceeding
            
            If no tickets have the 'claude' label, or if the specified ticket doesn't have this label, explain the requirement and exit gracefully.
            
            ## Efficient Implementation Process:
            
            ### Step 1: Get Ticket Information
            **If ticket ID provided:**
            - Use `linear_getIssueById` to fetch the specific ticket
            - Verify it has the 'claude' label before proceeding
            
            **If no ticket ID provided:**
            - First use `linear_getLabels` to get all labels and find the 'claude' label ID
            - Use `linear_searchIssues` with the claude label ID to find tickets marked for Claude automation
            - Filter for highest priority open ticket that's actionable (not just onboarding/documentation)
            - Only work on tickets that have the 'claude' label attached
            
            **Important**: Do not work on any ticket that doesn't have the 'claude' label. If the specified ticket ID doesn't have this label, explain this requirement and exit.
            
            ### Step 2: Implement Solution  
            - Make necessary code/config changes
            - Ensure changes follow project conventions
            - Add tests/documentation if needed
            
            ### Step 3: Atomic Git + PR Submission
            **Use this optimized sequence:**
            ```bash
            # Create and switch to feature branch
            git checkout -b feature/linear-{ticket-id}-{short-description}
            
            # Stage, commit, push, and create PR atomically  
            git add . && \
            git commit -m "feat: {concise-description}
            
            {detailed-description}
            
            Fixes {ticket-id}
            
            ðŸ¤– Generated with [Claude Code](https://claude.ai/code)" && \
            git push -u origin HEAD && \
            gh pr create \
              --title "feat: {concise-description}" \
              --body "{comprehensive-pr-description}" \
              --base main
            ```
            
            ### Step 4: Update Linear Ticket
            - Add comment with work summary and PR link
            - Update status if appropriate (e.g., "In Review")
            
            ## Best Practices:
            - Use conventional commit format (feat:, fix:, docs:, etc.)
            - Keep commit messages concise but descriptive
            - Include ticket reference in commit and PR
            - Use `--fill` flag for gh pr create if description gets too long
            - Check git status before making changes
            - Handle any merge conflicts or errors gracefully
            
            Please start by getting the Linear ticket information and then proceed with the implementation.
          mcp_config: "./mcp-config.json"
          allowed_tools: "Bash,View,Read,Write,Edit,MultiEdit,Glob,Grep,LS,mcp__linear__linear_getIssues,mcp__linear__linear_getIssueById,mcp__linear__linear_searchIssues,mcp__linear__linear_updateIssue,mcp__linear__linear_createComment,mcp__linear__linear_getComments,mcp__linear__linear_getProjects,mcp__linear__linear_getTeams,mcp__linear__linear_getViewer,mcp__linear__linear_assignIssue,mcp__linear__linear_setIssuePriority,mcp__linear__linear_addIssueLabel,mcp__linear__linear_getLabels"
          max_turns: "${{ github.event.inputs.max_turns }}"
          timeout_minutes: "30"
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
