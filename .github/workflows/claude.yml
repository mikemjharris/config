name: Claude Linear Task Automation
on:
  workflow_dispatch:
    inputs:
      ticket_identifier:
        description: 'Linear ticket ID to work on (e.g., MIK-4, or leave empty for highest priority)'
        required: false
        default: ''
        type: string
      custom_instructions:
        description: 'Additional instructions for Claude'
        required: false
        default: 'Implement the solution following best practices and create comprehensive documentation'
        type: string
      max_turns:
        description: 'Maximum conversation turns for Claude'
        required: false
        default: '20'
        type: string

jobs:
  claude-task-automation:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Git Configuration
        run: |
          git config user.name "Claude Assistant"
          git config user.email "claude.assistant@omnea.co"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Find Claude-labeled Linear ticket
        id: find-ticket
        run: |
          if [ -n "${{ github.event.inputs.ticket_identifier }}" ]; then
            # Check if specified ticket has 'claude' label
            TICKET_ID="${{ github.event.inputs.ticket_identifier }}"
            echo "Checking if ticket $TICKET_ID has 'claude' label..."
            
            RESPONSE=$(curl -s -H "Authorization: ${{ secrets.LINEAR_API_KEY }}" \
              -H "Content-Type: application/json" \
              -d "{\"query\": \"{ issue(id: \\\"$TICKET_ID\\\") { id title labels { nodes { name } } } }\"}" \
              https://api.linear.app/graphql)
            
            HAS_CLAUDE_LABEL=$(echo "$RESPONSE" | jq -r '.data.issue.labels.nodes[] | select(.name == "claude") | .name // empty')
            
            if [ -n "$HAS_CLAUDE_LABEL" ]; then
              echo "✅ Ticket $TICKET_ID has 'claude' label"
              echo "ticket_id=$TICKET_ID" >> $GITHUB_OUTPUT
              echo "has_ticket=true" >> $GITHUB_OUTPUT
            else
              echo "❌ Ticket $TICKET_ID does not have 'claude' label - skipping automation"
              echo "has_ticket=false" >> $GITHUB_OUTPUT
            fi
          else
            # Find highest priority ticket with 'claude' label
            echo "Finding highest priority ticket with 'claude' label..."
            
            RESPONSE=$(curl -s -H "Authorization: ${{ secrets.LINEAR_API_KEY }}" \
              -H "Content-Type: application/json" \
              -d '{"query": "{ issues(filter: { labels: { some: { name: { eq: \"claude\" } } }, state: { type: { neq: \"completed\" } } }, orderBy: priority, first: 1) { nodes { id title priority } } }"}' \
              https://api.linear.app/graphql)
            
            TICKET_ID=$(echo "$RESPONSE" | jq -r '.data.issues.nodes[0].id // empty')
            
            if [ -n "$TICKET_ID" ] && [ "$TICKET_ID" != "null" ]; then
              TICKET_TITLE=$(echo "$RESPONSE" | jq -r '.data.issues.nodes[0].title')
              echo "✅ Found ticket: $TICKET_ID - $TICKET_TITLE"
              echo "ticket_id=$TICKET_ID" >> $GITHUB_OUTPUT
              echo "has_ticket=true" >> $GITHUB_OUTPUT
            else
              echo "❌ No tickets found with 'claude' label - skipping automation"
              echo "has_ticket=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Install dependencies
        if: steps.find-ticket.outputs.has_ticket == 'true'
        run: yarn install --frozen-lockfile

      - name: Create MCP Configuration
        if: steps.find-ticket.outputs.has_ticket == 'true'
        run: |
          cat > mcp-config.json << 'EOF'
          {
            "mcpServers": {
              "linear": {
                "command": "npx",
                "args": ["-y", "@tacticlaunch/mcp-linear"],
                "env": {
                  "LINEAR_API_TOKEN": "${{ secrets.LINEAR_API_KEY }}"
                }
              }
            }
          }
          EOF

      - name: Run Claude Task Automation
        if: steps.find-ticket.outputs.has_ticket == 'true'
        id: claude-automation
        uses: anthropics/claude-code-base-action@beta
        env:
          GH_TOKEN: ${{ github.token }}
          TICKET_ID: ${{ steps.find-ticket.outputs.ticket_id }}
        with:
          prompt: |
            # Linear Task Implementation
            
            You are a senior software engineer implementing a specific Linear ticket that has been pre-identified.
            
            **Your Assignment:**
            - Ticket ID: ${{ env.TICKET_ID }}
            - This ticket has been verified to have the 'claude' label
            - Dependencies are already installed (`yarn install` completed)
            
            ## Your Tasks:
            
            ### Step 1: Get Ticket Details
            Use the Linear MCP tools to get full ticket information:
            - `linear_getIssueById` with the ticket ID
            - Review description, comments, and context
            - Understand the requirements and acceptance criteria
            
            ### Step 2: Implement Solution
            - Make necessary code/config changes based on ticket requirements
            - Follow project conventions and best practices
            - Add tests/documentation if needed
            
            ### Step 3: Quality Checks
            Run these commands to ensure code quality:
            ```bash
            # Run type checking
            yarn typecheck
            
            # Run tests
            yarn test
            ```
            Fix any type errors or test failures. Document existing unrelated issues in your PR.
            
            ### Step 4: Create and Submit PR
            Create branch, commit, and submit PR:
            ```bash
            # Create feature branch
            git checkout -b feature/linear-$TICKET_ID-{short-description}
            
            # Commit changes
            git add .
            git commit -m "feat: {concise description}
            
            {detailed description}
            
            Fixes $TICKET_ID
            
            🤖 Generated with [Claude Code](https://claude.ai/code)"
            
            # Push and create PR
            git push -u origin HEAD
            gh pr create \
              --title "feat: {concise description}" \
              --body "{comprehensive PR description}" \
              --base main
            ```
            
            ### Step 5: Update Linear Ticket
            Use Linear MCP tools to:
            - Add comment with implementation summary and PR link
            - Update ticket status if appropriate (e.g., "In Review")
            
            ## Additional Instructions
            ${{ github.event.inputs.custom_instructions }}
            
            ## Available Tools
            - Linear MCP server is configured for ticket management
            - GitHub CLI is available for PR creation
            - All project dependencies are installed
            - Standard file operations (Read, Write, Edit, etc.)
            
            **Note:** Automatic formatting (`yarn fmt`/`yarn format`) and linting (`yarn lint --fix`) will run after you complete your work.
            
            Start by getting the ticket details using `linear_getIssueById`!
          mcp_config: "./mcp-config.json"
          allowed_tools: "Bash,View,Read,Write,Edit,MultiEdit,Glob,Grep,LS,mcp__linear__linear_getIssueById,mcp__linear__linear_createComment,mcp__linear__linear_updateIssue,mcp__linear__linear_getComments"
          max_turns: "${{ github.event.inputs.max_turns }}"
          timeout_minutes: "30"
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}

      - name: Auto-format and lint code
        if: steps.find-ticket.outputs.has_ticket == 'true'
        run: |
          echo "Running automatic formatting and linting..."
          
          # Run formatting
          if yarn fmt 2>/dev/null || yarn format 2>/dev/null; then
            echo "✅ Code formatting completed"
          else
            echo "ℹ️  No format script found, skipping formatting"
          fi
          
          # Run linting with auto-fix
          if yarn lint --fix 2>/dev/null; then
            echo "✅ Linting completed with auto-fixes"
          else
            echo "ℹ️  Lint --fix failed or no lint script found"
          fi
          
          # Check if there are any changes to commit
          if ! git diff --quiet; then
            echo "📝 Auto-formatting/linting made changes, committing them..."
            git add .
            git commit -m "style: auto-format and lint fixes
            
            🤖 Automated formatting and linting applied after Claude changes"
            git push
            echo "✅ Formatting changes committed and pushed"
          else
            echo "✅ No formatting changes needed"
          fi
