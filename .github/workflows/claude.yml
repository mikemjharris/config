name: Claude Linear Task Automation
on:
  workflow_dispatch:
    inputs:
      ticket_identifier:
        description: 'Linear ticket ID to work on (e.g., MIK-4, or leave empty for highest priority)'
        required: false
        default: ''
        type: string
      custom_instructions:
        description: 'Additional instructions for Claude'
        required: false
        default: 'Implement the solution following best practices and create comprehensive documentation'
        type: string
      max_turns:
        description: 'Maximum conversation turns for Claude'
        required: false
        default: '20'
        type: string

jobs:
  claude-task-automation:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Git Configuration
        run: |
          git config user.name "Claude Assistant"
          git config user.email "claude@anthropic.com"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
        run: |
          cat > mcp-config.json << 'EOF'
          {
            "mcpServers": {
              "linear": {
                "command": "npx",
                "args": ["-y", "@tacticlaunch/mcp-linear"],
                "env": {
                  "LINEAR_API_TOKEN": "${{ secrets.LINEAR_API_KEY }}"
                }
              }
            }
          }
          EOF

      - name: Run Claude Task Automation
        id: claude-automation
        uses: anthropics/claude-code-base-action@beta
        with:
          prompt: |
            # Linear Task Automation Mission
            
            You are a senior software engineer tasked with implementing Linear tickets. Your goal is to:
            
            1. **Analyze the ticket**: Get details about the Linear ticket (ID: "${{ github.event.inputs.ticket_identifier }}" or find the highest priority open ticket if none specified)
            
            2. **Understand the requirements**: Read the ticket description, comments, and any related context
            
            3. **Implement the solution**: Write the necessary code, documentation, tests, or configuration
            
            4. **Create a Pull Request**: Commit your changes and prepare a PR with:
               - Clear title referencing the Linear ticket
               - Comprehensive description
               - Implementation details
               - Testing notes
            
            5. **Update Linear**: Comment on the ticket with progress and link to the PR
            
            ## Additional Instructions
            ${{ github.event.inputs.custom_instructions }}
            
            ## Process Steps:
            
            ### Step 1: Get Ticket Information
            - If ticket ID provided: fetch that specific ticket
            - If no ID: find the highest priority open ticket that's actionable (not just onboarding/documentation)
            - Get full details including description, comments, labels, assignee
            
            ### Step 2: Analyze & Plan
            - Understand what needs to be implemented
            - Check if this is a code task, configuration, documentation, or setup task
            - Plan the implementation approach
            
            ### Step 3: Implement
            - Create/modify files as needed
            - Follow best practices for the codebase
            - Add appropriate tests if it's code
            - Update documentation if needed
            
            ### Step 4: Create PR
            - Commit changes with meaningful messages
            - Create a branch with format: feature/linear-{ticket-id}
            - Prepare comprehensive PR description
            
            ### Step 5: Update Linear Ticket
            - Add a comprehensive comment to the Linear ticket with:
              - Summary of work completed
              - Link to the PR 
              - Technical details of implementation
              - Next steps or testing instructions
            - Update ticket status if appropriate (e.g., move to "In Review")
            - Assign ticket to yourself or appropriate team member
            - Add relevant labels if needed
            
            Please start by getting the Linear ticket information and then proceed with the implementation.
          mcp_config: "./mcp-config.json"
          allowed_tools: "Bash(git:*),View,Read,Write,Edit,MultiEdit,Glob,Grep,LS,mcp__linear__linear_getIssues,mcp__linear__linear_getIssueById,mcp__linear__linear_searchIssues,mcp__linear__linear_updateIssue,mcp__linear__linear_createComment,mcp__linear__linear_getComments,mcp__linear__linear_getProjects,mcp__linear__linear_getTeams,mcp__linear__linear_getViewer,mcp__linear__linear_assignIssue,mcp__linear__linear_setIssuePriority,mcp__linear__linear_addIssueLabel"
          max_turns: "${{ github.event.inputs.max_turns }}"
          timeout_minutes: "30"
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}

      - name: Create PR and Update Linear (if needed)
        if: steps.claude-automation.outputs.conclusion == 'error_max_turns'
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
        with:
          script: |
            const { execSync } = require('child_process');
            
            try {
              // Check if we're on a feature branch
              const currentBranch = execSync('git branch --show-current', { encoding: 'utf8' }).trim();
              console.log('Current branch:', currentBranch);
              
              if (currentBranch.startsWith('feature/linear-')) {
                console.log('Found feature branch, creating PR...');
                
                // Push the branch
                try {
                  execSync(`git push -u origin ${currentBranch}`, { stdio: 'inherit' });
                  console.log('Branch pushed successfully');
                } catch (error) {
                  console.log('Branch might already exist, continuing...');
                }
                
                // Extract ticket ID from branch name
                const ticketMatch = currentBranch.match(/linear-([A-Z]+-\d+)/);
                const ticketId = ticketMatch ? ticketMatch[1] : 'Unknown';
                
                // Create PR
                const prTitle = `feat: ${currentBranch.replace('feature/linear-', '').replace(/-/g, ' ')}`;
                const prBody = `# Implementation for Linear ${ticketId}

                This PR implements the requirements from Linear ticket ${ticketId}.

                ## Changes Made
                - Comprehensive improvements to the codebase
                - Added necessary configurations and implementations
                - Enhanced functionality based on ticket requirements

                ## Testing
                - [ ] Manual testing completed
                - [ ] Code review completed
                - [ ] Ready for merge

                **Linear Ticket**: ${ticketId}
                **Auto-generated by**: Claude Code Assistant

                ---
                *This PR was automatically created by Claude Code*`;

                const pr = await github.rest.pulls.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: prTitle,
                  body: prBody,
                  head: currentBranch,
                  base: 'main',
                  draft: false
                });
                
                console.log(`PR created: ${pr.data.html_url}`);
                
                // Update Linear ticket (simplified - just add a comment)
                // Note: This is a basic implementation. For full Linear integration,
                // you'd need to use the Linear API directly
                console.log(`\nâœ… Next steps:`);
                console.log(`1. Review PR: ${pr.data.html_url}`);
                console.log(`2. Update Linear ticket ${ticketId} with PR link`);
                console.log(`3. Test the implementation`);
                console.log(`4. Merge when ready`);
                
              } else {
                console.log('No feature branch found - Claude may not have started implementation');
              }
              
            } catch (error) {
              console.error('Error creating PR:', error);
            }

      - name: Create Summary Issue
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Get the result from Claude
            const conclusion = '${{ steps.claude-automation.outputs.conclusion }}';
            const result = 'Check the action logs for detailed implementation steps and results.';
            
            let executionSummary = '';
            try {
              const executionFile = '${{ steps.claude-automation.outputs.execution_file }}';
              if (executionFile && fs.existsSync(executionFile)) {
                const executionLog = JSON.parse(fs.readFileSync(executionFile, 'utf8'));
                if (executionLog && executionLog.messages) {
                  // Count tools used and get summary
                  const toolUses = executionLog.messages.filter(m => 
                    m.role === 'assistant' && m.content && 
                    Array.isArray(m.content) && 
                    m.content.some(c => c.type === 'tool_use')
                  ).length;
                  
                  executionSummary = `\n## Execution Summary\n- **Tool calls made**: ${toolUses}\n- **Status**: ${conclusion}\n`;
                }
              }
            } catch (error) {
              console.log('Could not read execution details:', error.message);
            }
            
            const ticketId = '${{ github.event.inputs.ticket_identifier }}' || 'Auto-selected';
            const title = `Claude Automation Report - ${ticketId} - ${new Date().toISOString().split('T')[0]}`;
            
            const body = `# Claude Linear Task Automation Report
            
            **Target Ticket:** ${ticketId}
            **Instructions:** "${{ github.event.inputs.custom_instructions }}"
            **Generated:** ${new Date().toISOString()}
            **Status:** ${conclusion}
            
            ## What Claude Was Asked To Do
            
            1. âœ… Find and analyze Linear ticket (${ticketId})
            2. âœ… Understand requirements and plan implementation  
            3. âœ… Write code/documentation/configuration as needed
            4. âœ… Create a Pull Request with comprehensive description
            5. âœ… Update the Linear ticket with progress and PR link
            
            ${executionSummary}
            
            ## Next Steps
            
            ${conclusion === 'success' ? 
              '- Review any PR created by Claude\n- Check Linear ticket for updates\n- Test the implementation if code was written\n- Merge PR if everything looks good' :
              '- Check the action logs for any errors\n- Review what Claude was able to complete\n- Manually finish any incomplete steps'
            }
            
            ## Files
            
            **Execution Log**: \`${{ steps.claude-automation.outputs.execution_file }}\`
            
            ---
            
            *This automation was powered by Claude Code + Linear MCP integration*`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['claude-automation', 'linear-integration', conclusion === 'success' ? 'completed' : 'needs-review']
            });
            
            console.log(`Summary issue created! Status: ${conclusion}`);
